#!/usr/bin/env python
""" Use a single laser and change its trigger parameters.

A camera trigger signal must be used as input to the FPGA. The
first laser trigger signal (laser0) is then generated by the
FPGA and follows the camera trigger input.
"""

import microfpga.controller as cl
import microfpga.signals as sig
from microfpga.signals import LaserTriggerMode

# By default use_camera = True, here we use passive triggering
with cl.MicroFPGA(n_laser=1, use_camera=False) as mufpga:

    # check if successful
    if mufpga.is_connected():

        # print id
        print(f'Connected to {mufpga.get_id()}')

        # check current state of the first laser
        # it prints [mode, duration, sequence]
        laser_id = 0  # signals id are 0-indexed
        print(f'Current Laser {laser_id} state: {mufpga.get_laser_state(laser_id)}')

        # define a new laser state
        laser = {
            'channel': laser_id,
            'mode': LaserTriggerMode.MODE_RISING,  # pulsing on rising edge of camera input
            'duration': 1_000,  # pulse length
            'sequence': sig.format_sequence('1010101010101010')  # sequence of on/off frames
        }

        # apply the parameters at once
        mufpga.set_laser_state(**laser)

        # read current laser state
        print(f'Current Laser 0 state: {mufpga.get_laser_state(0)}')
        assert [laser['mode'].value,
                laser['duration'],
                laser['sequence']] == mufpga.get_laser_state(laser['channel'])

        # we can change again the parameters
        laser['mode'] = LaserTriggerMode.MODE_FALLING
        laser['duration'] = 2000
        laser['sequence'] = sig.format_sequence('0011001100110011')
        mufpga.set_laser_state(**laser)

        # read the new state
        print(f'Current Laser 0 state: {mufpga.get_laser_state(0)}')

    else:
        print('Failed to connect')

print('Disconnected')
